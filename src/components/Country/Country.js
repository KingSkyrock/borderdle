import React from 'react';
import ReactDOM from 'react-dom';
import PropTypes from 'prop-types';
import { gsap } from 'gsap'
import { Twemoji } from "@teuteuf/react-emoji-render";

class Path {
  constructor(border, tl) {
    this.border = border
    this.tl = tl

    this.border.setAttribute('stroke-dasharray', this.border.getTotalLength());
    this.border.setAttribute('stroke-dashoffset', this.border.getTotalLength());
    this.tl.to(this.border, {
      strokeDashoffset: 0,
      duration: 6,
      ease: "none",
    });
    this.tl.pause()
  }

}

export default class Country extends React.Component {
  constructor(props) {
    super(props);

    this.progress = 0;
    this.timer = null;
    this.duration = 6000;
    this.pathArray = [];
    this.svg = React.createRef();

    this.state = {

    }
  };

  componentDidMount() {
    var borders = this.svg.current.querySelectorAll('path');
    console.log(borders)
    for (var i = 0; i < borders.length; i++) {
      this.pathArray.push(new Path(borders[i], gsap.timeline()))
    }
  }

  advance() {
    if (this.progress < 1 && this.timer == null) {
      for (var i = 0; i < this.pathArray.length; i++) {
        this.pathArray[i].tl.resume();
      }
      this.timer = setTimeout(()=> {
        for (var i = 0; i < this.pathArray.length; i++) {
          this.pathArray[i].tl.pause();
        }
        this.progress += 1/6;
        this.timer = null;
       }, this.duration/6)
     }
  }

  render() {
    return (
      <div className="flex flex-col items-center pt-3">
        <svg className='pb-1' ref={this.svg} xmlns="http://www.w3.org/2000/svg" version="1.0" width="208px" height="208px" viewBox="0 0 1024.000000 1024.000000">
          <g id="border" transform="translate(0.000000,1024.000000) scale(0.100000,-0.100000)" fill="none" stroke="#1e293b" strokeWidth="100px">
<path d="M 737.832031 162.273438 C 730.566406 163.382812 723.972656 168.046875 722.320312 173.257812 C 716.550781 191.4375 668.125 245.375 655.371094 247.828125 C 648.523438 249.148438 642.640625 253.355469 642.292969 257.179688 C 641.945312 261.003906 641.421875 268.511719 641.125 273.863281 C 640.5625 283.976562 628.695312 291.804688 606.683594 296.582031 C 597.65625 298.542969 593.824219 302.28125 593.824219 309.132812 C 593.824219 316.15625 591.730469 318.089844 586.351562 316.03125 C 581.917969 314.324219 573.222656 317.921875 564.953125 324.878906 C 541.617188 344.511719 523.6875 333.429688 523.6875 299.371094 C 523.6875 295.09375 517.753906 285.90625 510.496094 278.953125 L 497.296875 266.316406 L 491 278.078125 C 484.296875 290.601562 479.289062 292.765625 474.59375 285.171875 C 470.082031 277.871094 452.859375 279.675781 443.148438 288.460938 C 437.792969 293.304688 422.121094 297.691406 403.125 299.65625 C 373.375 302.734375 371.011719 303.90625 353.109375 324.453125 C 337.621094 342.230469 331.441406 346.058594 317.953125 346.25 C 304.027344 346.445312 298.804688 349.972656 282.886719 369.953125 C 250.800781 410.226562 242.828125 422.320312 246.554688 425.082031 C 254.925781 431.296875 262.074219 450.058594 259.34375 458.660156 C 257.722656 463.765625 258.914062 470.976562 261.996094 474.6875 C 265.640625 479.078125 266.515625 488.644531 264.496094 502.097656 C 262.671875 514.261719 263.308594 523.945312 266.046875 525.636719 C 281.429688 535.144531 299.421875 571.171875 290.015625 573.628906 C 281.273438 575.914062 278.414062 580.804688 280.113281 590.5625 C 280.480469 592.683594 276.742188 593.140625 271.804688 591.574219 C 261.175781 588.199219 247.816406 599.816406 247.816406 612.433594 C 247.816406 617.21875 243.609375 622.472656 238.464844 624.105469 C 233.324219 625.734375 229.113281 629.859375 229.113281 633.265625 C 229.113281 636.675781 225.8125 640.730469 221.777344 642.277344 C 217.410156 643.957031 215.4375 648.410156 216.910156 653.296875 C 218.652344 659.101562 213.070312 666.265625 197.839844 677.769531 C 185.996094 686.714844 173.003906 701.441406 168.96875 710.492188 L 161.628906 726.949219 L 160.1875 712.925781 C 156.214844 674.171875 149.203125 667.320312 142.265625 695.394531 C 138.640625 710.070312 134.316406 714.65625 115.726562 723.535156 C 97.4375 732.273438 93.515625 736.34375 93.515625 746.609375 C 93.515625 753.464844 88.796875 764.097656 83.027344 770.238281 C 73.410156 780.46875 73.199219 781.777344 80.5 785.859375 C 84.878906 788.3125 89.722656 798.148438 91.257812 807.722656 C 97.066406 843.859375 97.109375 843.925781 121.453125 852.675781 C 134.417969 857.339844 146.949219 864.585938 149.296875 868.785156 C 154.46875 878.023438 158.117188 865.621094 160.082031 832.136719 L 161.316406 811.101562 L 180.957031 809.675781 C 193.148438 808.789062 204.882812 811.054688 211.886719 815.640625 C 218.09375 819.707031 229.644531 822.539062 237.558594 821.9375 C 245.910156 821.300781 255.648438 824.195312 260.78125 828.835938 C 265.640625 833.234375 271.023438 835.425781 272.746094 833.707031 C 274.464844 831.984375 275.875 835.015625 275.875 840.433594 C 275.875 845.851562 278.1875 851.71875 281.019531 853.464844 C 283.851562 855.214844 285.046875 862.234375 283.679688 869.0625 C 282.246094 876.25 284.839844 889.300781 289.847656 900.050781 C 294.601562 910.265625 298.664062 915.175781 298.871094 910.960938 C 299.449219 899.316406 327.816406 895.722656 349.070312 904.601562 C 363.195312 910.5 369.226562 910.875 379.765625 906.511719 C 394.722656 900.316406 426.433594 899.34375 445.285156 904.5 C 456.273438 907.503906 458.707031 906.289062 462.703125 895.777344 C 467.519531 883.113281 474.542969 880.714844 485.859375 887.875 C 509.449219 902.804688 533.660156 869.503906 538.113281 816 C 540.722656 784.667969 543.617188 772.679688 549.640625 768.277344 C 557.335938 762.652344 557.253906 740.367188 549.464844 719.179688 C 539.828125 692.976562 573.425781 698.3125 599.679688 727.15625 C 625.109375 755.09375 645.992188 756.574219 658.046875 731.296875 C 665.402344 715.878906 667.199219 714.832031 681.644531 717.539062 C 701.484375 721.261719 727.988281 712.660156 734.570312 700.363281 C 738.277344 693.429688 741.03125 692.277344 744.820312 696.0625 C 747.667969 698.910156 753.785156 701.242188 758.414062 701.242188 C 763.042969 701.242188 766.832031 703.636719 766.832031 706.566406 C 766.832031 732.917969 851.894531 747.757812 870.59375 724.671875 C 878.375 715.0625 880.613281 714.519531 890.535156 719.828125 C 916.382812 733.660156 947.6875 705.636719 942 673.75 C 940.140625 663.320312 942.800781 646.917969 949.8125 625.527344 C 958.289062 599.679688 959.320312 591.507812 954.890625 585.230469 C 935.707031 558.023438 924.519531 535.128906 925.140625 524.335938 C 928.515625 465.820312 931.035156 435.234375 933.347656 424.710938 C 935.472656 415.050781 931.332031 405.390625 914.574219 380.921875 C 902.75 363.660156 893.078125 344.597656 893.078125 338.570312 C 893.078125 326.601562 878.339844 310.425781 863.03125 305.589844 C 840.226562 298.394531 814.886719 271.636719 812.25 251.976562 C 810.84375 241.5 806.457031 229.4375 802.507812 225.160156 C 798.554688 220.882812 790.625 212.261719 784.886719 206 C 773.121094 193.167969 769.4375 174.082031 776.972656 165.007812 C 782.179688 158.738281 767.683594 157.722656 737.832031 162.273438 M 91.957031 713.707031 C 83.945312 721.714844 88.8125 729.386719 98.191406 723.527344 C 103.335938 720.316406 107.542969 716.09375 107.542969 714.140625 C 107.542969 709.761719 96.21875 709.445312 91.957031 713.707031 "/>          </g>        </svg>
        <div className="grid grid-cols-7 gap-1 text-center">
          <div className='px-[228px] col-span-7 h-8 bg-[#85e4a8] dark:bg-slate-600 rounded'></div>
          <div className='px-[228px] col-span-7 h-8 bg-[#85e4a8] dark:bg-slate-600 rounded'></div>
          <div className='px-[228px] col-span-7 h-8 bg-[#85e4a8] dark:bg-slate-600 rounded'></div>
          <div className='px-[228px] col-span-7 h-8 bg-[#85e4a8] dark:bg-slate-600 rounded'></div>
          <div className='px-[228px] col-span-7 h-8 bg-[#85e4a8] dark:bg-slate-600 rounded'></div>
          <div className='px-[228px] col-span-7 h-8 bg-[#85e4a8] dark:bg-slate-600 rounded'></div>
        </div>
        <input maxLength="56" minLength="2" type="text" className="outline-none border-2 border-neutral-100 focus:border-neutral-300 mt-3 w-[464px] h-8 bg-[#3fb66b] dark:bg-slate-600 rounded text-neutral-100 text-lg text-center	placeholder:text-center placeholder:text-green-100 placeholder:text-lg" placeholder="Enter Countries or Territories"></input>
        <button className="px-[140px] text-neutral-200 rounded font-bold p-1 flex items-center justify-center border-2 uppercase my-0.5 bg-[#126130] hover:bg-[#0f5328] active:bg-[#147236] text-xl" onClick={()=>this.advance()}>
        <Twemoji  
          text="🌐"
          options={{ className: "inline-block" }}
          className="flex items-center justify-center pr-1"
        />Enter answer
        </button>
      </div>
    )
  }
}

Country.propTypes = {
  name: PropTypes.string.isRequired,
};