import React from 'react';
import ReactDOM from 'react-dom';
import PropTypes from 'prop-types';
import { gsap } from 'gsap'

class Path {
  constructor(border, tl) {
    this.border = border
    this.tl = tl

    this.border.setAttribute('stroke-dasharray', this.border.getTotalLength());
    this.border.setAttribute('stroke-dashoffset', this.border.getTotalLength());
    this.tl.to(this.border, {
      strokeDashoffset: 0,
      duration: 6,
      ease: "none",
    });
    this.tl.pause()
  }

}

export default class Country extends React.Component {
  constructor(props) {
    super(props);

    this.progress = 0;
    this.timer = null;
    this.duration = 6000;
    this.pathArray = [];
    this.svg = React.createRef();

    this.state = {

    }
  };

  componentDidMount() {
    var borders = this.svg.current.querySelectorAll('path');
    for (var i = 0; i < borders.length; i++) {
      this.pathArray.push(new Path(borders[i], gsap.timeline()))
    }
  }

  advance(callback) {
    if (this.progress < 1 && this.timer == null) {
      for (var i = 0; i < this.pathArray.length; i++) {
        this.pathArray[i].tl.resume();
      }
      this.timer = setTimeout(()=> {
        for (var i = 0; i < this.pathArray.length; i++) {
          this.pathArray[i].tl.pause();
        }
        this.progress += 1/6;
        this.timer = null;
        callback(this.progress*6);
       }, this.duration/6)
     }
  }

  render() {
    return (
      <div className="flex flex-col items-center pt-3">
        <svg className='pb-1' ref={this.svg} xmlns="http://www.w3.org/2000/svg" version="1.0" width="208px" height="208px" viewBox="0 0 1024.000000 1024.000000">
          <g id="border" transform="translate(0.000000,1024.000000) scale(0.100000,-0.100000)" fill="none" stroke="#1e293b" strokeWidth="100px">
            <path id="path0" d="M288.215 63.400 C 285.377 63.833,282.802 65.656,282.156 67.691 C 279.902 74.794,260.987 95.868,256.005 96.826 C 253.330 97.341,251.031 98.985,250.896 100.479 C 250.760 101.974,250.555 104.907,250.439 106.997 C 250.220 110.949,245.584 114.008,236.986 115.874 C 233.459 116.640,231.963 118.100,231.963 120.778 C 231.963 123.522,231.144 124.277,229.044 123.472 C 227.311 122.806,223.915 124.211,220.685 126.929 C 211.569 134.600,204.566 130.270,204.566 116.964 C 204.566 115.293,202.247 111.703,199.412 108.987 L 194.257 104.049 191.797 108.645 C 189.179 113.537,187.222 114.383,185.388 111.416 C 183.626 108.564,176.898 109.268,173.105 112.701 C 171.013 114.594,164.891 116.307,157.470 117.075 C 145.850 118.278,144.927 118.735,137.934 126.763 C 131.884 133.708,129.470 135.205,124.201 135.279 C 118.760 135.355,116.721 136.733,110.502 144.540 C 97.969 160.274,94.855 165.000,96.310 166.079 C 99.580 168.506,102.372 175.837,101.306 179.197 C 100.673 181.192,101.139 184.010,102.342 185.459 C 103.766 187.175,104.107 190.913,103.319 196.168 C 102.606 200.921,102.855 204.704,103.925 205.365 C 109.934 209.079,116.962 223.155,113.288 224.116 C 109.872 225.009,108.756 226.919,109.419 230.731 C 109.563 231.560,108.103 231.738,106.174 231.126 C 102.022 229.808,96.804 234.347,96.804 239.277 C 96.804 241.146,95.160 243.198,93.151 243.836 C 91.142 244.473,89.498 246.085,89.498 247.416 C 89.498 248.748,88.208 250.332,86.632 250.937 C 84.926 251.592,84.156 253.333,84.730 255.242 C 85.411 257.509,83.231 260.308,77.281 264.803 C 72.655 268.298,67.580 274.052,66.003 277.588 L 63.136 284.018 62.574 278.539 C 61.021 263.398,58.283 260.720,55.573 271.689 C 54.157 277.423,52.467 279.214,45.205 282.684 C 38.061 286.097,36.530 287.688,36.530 291.698 C 36.530 294.377,34.686 298.531,32.432 300.930 C 28.676 304.928,28.594 305.438,31.445 307.034 C 33.156 307.992,35.048 311.835,35.648 315.575 C 37.916 329.694,37.933 329.720,47.442 333.139 C 52.507 334.961,57.402 337.792,58.319 339.432 C 60.340 343.042,61.765 338.196,62.532 325.114 L 63.014 316.895 70.687 316.338 C 75.448 315.992,80.033 316.877,82.768 318.669 C 85.193 320.257,89.705 321.364,92.796 321.129 C 96.058 320.880,99.863 322.011,101.867 323.825 C 103.766 325.543,105.869 326.399,106.541 325.727 C 107.213 325.055,107.763 326.238,107.763 328.355 C 107.763 330.472,108.667 332.764,109.773 333.447 C 110.879 334.130,111.347 336.873,110.813 339.541 C 110.252 342.349,111.266 347.447,113.221 351.648 C 115.079 355.639,116.666 357.557,116.747 355.911 C 116.972 351.361,128.053 349.956,136.355 353.425 C 141.873 355.730,144.229 355.877,148.346 354.172 C 154.189 351.752,166.575 351.371,173.939 353.386 C 178.232 354.560,179.182 354.085,180.743 349.978 C 182.625 345.030,185.369 344.093,189.789 346.891 C 199.003 352.724,208.461 339.713,210.201 318.810 C 211.220 306.568,212.351 301.884,214.703 300.164 C 217.709 297.966,217.678 289.259,214.635 280.982 C 210.871 270.744,223.994 272.829,234.250 284.098 C 244.184 295.013,252.341 295.592,257.050 285.716 C 259.923 279.692,260.625 279.283,266.267 280.341 C 274.018 281.795,284.370 278.435,286.941 273.630 C 288.390 270.922,289.466 270.471,290.945 271.950 C 292.058 273.062,294.447 273.973,296.256 273.973 C 298.064 273.973,299.543 274.909,299.543 276.054 C 299.543 286.349,332.771 292.148,340.075 283.128 C 343.115 279.374,343.989 279.161,347.865 281.235 C 357.962 286.639,370.190 275.690,367.969 263.232 C 367.243 259.158,368.281 252.749,371.021 244.392 C 374.331 234.294,374.734 231.101,373.004 228.648 C 365.510 218.019,361.140 209.073,361.383 204.857 C 362.701 181.995,363.686 170.045,364.589 165.933 C 365.419 162.159,363.801 158.385,357.256 148.826 C 352.637 142.081,348.858 134.634,348.858 132.279 C 348.858 127.602,343.102 121.282,337.121 119.394 C 328.214 116.582,318.315 106.128,317.285 98.446 C 316.736 94.354,315.023 89.640,313.479 87.969 C 311.935 86.298,308.838 82.930,306.596 80.484 C 302.001 75.470,300.562 68.014,303.505 64.468 C 305.539 62.018,299.876 61.622,288.215 63.400 M35.921 278.843 C 32.791 281.973,34.693 284.969,38.356 282.681 C 40.365 281.426,42.009 279.776,42.009 279.013 C 42.009 277.302,37.585 277.179,35.921 278.843 " fill-rule="evenodd"></path>
          </g>
        </svg>

      </div>
    )
  }
}

Country.propTypes = {
  paths: PropTypes.array.isRequired,
};
